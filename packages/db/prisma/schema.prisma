generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  username        String       @unique
  email           String       @unique
  password        String
  rating          Int          @default(1200)
  gamesAsWhite    Game[]       @relation("GamesAsWhite")
  gamesAsBlack    Game[]       @relation("GamesAsBlack")
  createdAt       DateTime     @default(now())
  lastLogin       DateTime?
  profilePicture  String?
  bio             String?
  country         String?
  titleId         String?
  title           Title?       @relation(fields: [titleId], references: [id],onDelete: Cascade)
  notifications   Notification[]
  gameChats       GameChat[]
  
  @@index([rating])
}

model Game {
  id            String      @id @default(uuid())
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User        @relation("GamesAsWhite", fields: [whitePlayerId], references: [id],onDelete: Cascade)
  blackPlayer   User        @relation("GamesAsBlack", fields: [blackPlayerId], references: [id],onDelete: Cascade)
  status        GameStatus
  result        GameResult?
  timeControl   TimeControl
  startingFen   String      @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  currentFen    String?
  startAt       DateTime    @default(now())
  endAt         DateTime?
  moves         Move[]
  opening       String?
  event         String?
  pgn           String?
  chat          GameChat[]
  
  @@index([status, result])
}

model Move {
  id         String   @id @default(uuid())
  gameId     String
  game       Game     @relation(fields: [gameId], references: [id],onDelete: Cascade)
  moveNumber Int
  notation   String
  comments   String?
  startFen   String
  endFen     String
  timeTaken  Int?
  createdAt  DateTime @default(now())
  
  @@index([gameId])
}

model Title {
  id          String @id @default(uuid())
  name        String
  description String
  users       User[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model GameChat {
  id        String   @id @default(uuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id],onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  message   String
  createdAt DateTime @default(now())
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}

enum TimeControl {
  CLASSICAL
  RAPID
  BLITZ
  BULLET
}